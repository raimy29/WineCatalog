# Example YAML to get you started quickly.
# Be aware that YAML has indentation based scoping.
# Code completion support is available so start typing for available options.
swagger: '2.0'

# This is your document metadata
info:
  version: "0.1.0"
  title: WineCatalog API

# Describe your paths here
paths:
  # This is a path endpoint. Change it.
  /users:
    # This is a HTTP operation
    get:
      # Describe this verb here. Note: you can use markdown
      description: |
        Returns all `User` objects.
      operationId: listUsers
      produces:
          - application/json
      # This is array of GET operation parameters:
      # Expected responses for this operation:
      responses:
        # Response code
        200:
          description: Successful response
          # A schema describing your response object.
          # Use JSON Schema format
          schema:
            title: ArrayOfUsers
            type: array
            items:
              $ref: '#/definitions/User'
  /wines/{id} :
    # This is a HTTP operation
    get:
      # Describe this verb ere. Note: you can use markdown
      description: |
        Returns the `Wine` list for a single `User`.
      operationId: listWines
      # This is array of GET operation parameters:
      # Expected responses for this operation:
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: ID of User
          required: true
          type: integer
          format: int64
      responses:
        # Response code
        '200':
          description: Successful response
          # A schema describing your response object.
          # Use JSON Schema format
          schema:
            title: ArrayOfWines
            type: array
            items:
             $ref: '#/definitions/Wine'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/errorModel'     
    post:
      description: |
        Adds a new `Wine` for the given `User`. Duplicates are not allowed.
      operationId: addWine
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: ID of User
          required: true
          type: integer
          format: int64
        - name: Wine
          in: body
          description: Wine to add to the users list
          required: true
          schema:
            $ref: '#/definitions/Wine'
      responses:
        '200':
          description: Wine response
          schema:
            $ref: '#/definitions/Wine'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/errorModel'
    
    delete:
      description: |
        Deletes all Wines of `User` with given ID.
      operationId: emptyWineList
      parameters:
        - name: id
          in: path
          description: ID of User
          required: true
          type: integer
          format: int64
      responses:
        '204':
          description: Wines deleted
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/errorModel'
            
  /wines/{user-id}/{wine-id} :
    delete:
      description: |
        Deletes `Wine~ with ID (if exists) of `User` with given ID.
      operationId: deleteWien
      parameters:
        - name: user-id
          in: path
          description: ID of User
          required: true
          type: integer
          format: int64
        - name: wine-id
          in: path
          description: ID of Wine
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: Wine deleted
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/errorModel'  
definitions:
  User:
    type: object
    required:
      - id
      - name
    properties:
      id:
        type: integer
        format: int64
      name:
        type: string
        
  Wine:
    type: object
    required:
      - id
      - name
    properties:
      id:
        type: integer
        format: int64
      name:
        type: string
      winery:
        type: string
      grape_variety:
        type: string
      type:
        type: string
      rating:
        type: integer

  errorModel:
    type: object
    required:
      - code
      - message
    properties:
     code:
       type: integer
       format: int32
     message:
       type: string             
                  